//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NaturalLangOps.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="INaturalLangOpsListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class NaturalLangOpsBaseListener : INaturalLangOpsListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] NaturalLangOpsParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] NaturalLangOpsParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] NaturalLangOpsParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] NaturalLangOpsParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperation([NotNull] NaturalLangOpsParser.OperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperation([NotNull] NaturalLangOpsParser.OperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.booleanOperation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanOperation([NotNull] NaturalLangOpsParser.BooleanOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.booleanOperation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanOperation([NotNull] NaturalLangOpsParser.BooleanOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] NaturalLangOpsParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] NaturalLangOpsParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] NaturalLangOpsParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] NaturalLangOpsParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.mostrarStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMostrarStatement([NotNull] NaturalLangOpsParser.MostrarStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.mostrarStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMostrarStatement([NotNull] NaturalLangOpsParser.MostrarStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] NaturalLangOpsParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] NaturalLangOpsParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.operador"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperador([NotNull] NaturalLangOpsParser.OperadorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.operador"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperador([NotNull] NaturalLangOpsParser.OperadorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NaturalLangOpsParser.comparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparator([NotNull] NaturalLangOpsParser.ComparatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NaturalLangOpsParser.comparator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparator([NotNull] NaturalLangOpsParser.ComparatorContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
