//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NaturalLangOps.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NaturalLangOpsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ID=13, NUMERO=14, WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "ID", "NUMERO", "WS"
	};


	public NaturalLangOpsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NaturalLangOpsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'ES IGUAL A'", "'GUARDAR'", "'MOSTRAR'", "'MAS'", "'MENOS'", 
		"'POR'", "'ENTRE'", "'ES MAYOR'", "'ES MENOR'", "'ES IGUAL'", "'ES DISTINTO'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ID", "NUMERO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NaturalLangOps.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NaturalLangOpsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,138,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,12,1,12,5,12,122,8,12,10,12,12,12,125,9,12,
		1,13,4,13,128,8,13,11,13,12,13,129,1,14,4,14,133,8,14,11,14,12,14,134,
		1,14,1,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,1,0,4,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,
		48,57,3,0,9,10,13,13,32,32,140,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,1,31,1,0,0,0,3,33,1,0,0,0,5,44,1,0,0,0,7,52,1,0,0,0,9,60,1,0,0,
		0,11,64,1,0,0,0,13,70,1,0,0,0,15,74,1,0,0,0,17,80,1,0,0,0,19,89,1,0,0,
		0,21,98,1,0,0,0,23,107,1,0,0,0,25,119,1,0,0,0,27,127,1,0,0,0,29,132,1,
		0,0,0,31,32,5,59,0,0,32,2,1,0,0,0,33,34,5,69,0,0,34,35,5,83,0,0,35,36,
		5,32,0,0,36,37,5,73,0,0,37,38,5,71,0,0,38,39,5,85,0,0,39,40,5,65,0,0,40,
		41,5,76,0,0,41,42,5,32,0,0,42,43,5,65,0,0,43,4,1,0,0,0,44,45,5,71,0,0,
		45,46,5,85,0,0,46,47,5,65,0,0,47,48,5,82,0,0,48,49,5,68,0,0,49,50,5,65,
		0,0,50,51,5,82,0,0,51,6,1,0,0,0,52,53,5,77,0,0,53,54,5,79,0,0,54,55,5,
		83,0,0,55,56,5,84,0,0,56,57,5,82,0,0,57,58,5,65,0,0,58,59,5,82,0,0,59,
		8,1,0,0,0,60,61,5,77,0,0,61,62,5,65,0,0,62,63,5,83,0,0,63,10,1,0,0,0,64,
		65,5,77,0,0,65,66,5,69,0,0,66,67,5,78,0,0,67,68,5,79,0,0,68,69,5,83,0,
		0,69,12,1,0,0,0,70,71,5,80,0,0,71,72,5,79,0,0,72,73,5,82,0,0,73,14,1,0,
		0,0,74,75,5,69,0,0,75,76,5,78,0,0,76,77,5,84,0,0,77,78,5,82,0,0,78,79,
		5,69,0,0,79,16,1,0,0,0,80,81,5,69,0,0,81,82,5,83,0,0,82,83,5,32,0,0,83,
		84,5,77,0,0,84,85,5,65,0,0,85,86,5,89,0,0,86,87,5,79,0,0,87,88,5,82,0,
		0,88,18,1,0,0,0,89,90,5,69,0,0,90,91,5,83,0,0,91,92,5,32,0,0,92,93,5,77,
		0,0,93,94,5,69,0,0,94,95,5,78,0,0,95,96,5,79,0,0,96,97,5,82,0,0,97,20,
		1,0,0,0,98,99,5,69,0,0,99,100,5,83,0,0,100,101,5,32,0,0,101,102,5,73,0,
		0,102,103,5,71,0,0,103,104,5,85,0,0,104,105,5,65,0,0,105,106,5,76,0,0,
		106,22,1,0,0,0,107,108,5,69,0,0,108,109,5,83,0,0,109,110,5,32,0,0,110,
		111,5,68,0,0,111,112,5,73,0,0,112,113,5,83,0,0,113,114,5,84,0,0,114,115,
		5,73,0,0,115,116,5,78,0,0,116,117,5,84,0,0,117,118,5,79,0,0,118,24,1,0,
		0,0,119,123,7,0,0,0,120,122,7,1,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,
		121,1,0,0,0,123,124,1,0,0,0,124,26,1,0,0,0,125,123,1,0,0,0,126,128,7,2,
		0,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,
		28,1,0,0,0,131,133,7,3,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,
		0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,6,14,0,0,137,30,1,0,0,0,4,
		0,123,129,134,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
